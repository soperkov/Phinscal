@page "/"

@rendermode InteractiveServer
@using Phinscal.Models
@using Phinscal.Services
@inject IWebHostEnvironment WebHostEnvironment

<style>
    body {
        background-color: #353634;
        height: 100vh;
        width: 100vw;
        overflow-x: hidden;
        justify-content: center;
        padding: 2%;
        display: flex;
        flex-direction: column;
        text-align: center;
    }

    h1 {
        color: palegoldenrod;
        font-size: 12px;
        font-weight: bold;
    }

    label {
        font-size: 120%;
        color: #80772b;
        font-weight: bold;
    }

    button {
        margin: 15px;
    }

    .container {
        display: flex;
        flex-direction: column;
    }

    .form-container { 
        text-align: center;
        padding: 20px;
        border: 2px solid #423e1b;
        border-radius: 10px;
        background-color: #2b2b2a;
        display: flex;
        flex-direction: row;
    }

    .form_class {
        display: flex;
        justify-content: space-between;
        gap: 100px; 
        margin: 0 auto; 
    }

    .login, .register {
        flex: 1; 
        margin: 0;
        padding: 20px;
        border: 2px solid #423e1b;
        border-radius: 10px;
        background-color: #2b2b2a;
    }

    .or_bor {
        background-color: rgba(1.9, 1.9, 1.9, 0.1);
        height: 0px;
        border: 5px 0 0 0;
        border: dashed rgba(2.2, 2.2, 2.2, 0.1); 
        border-radius: 10px;
        margin: 0px;
        padding: 0px;
    }

    .title {
        font-size: 400%;
        margin-bottom: 20px;
    }

    .btn-custom {
        background-color: darkgoldenrod;
        border-radius: 5px;
        border: 2px solid #423e1b;
        color: black;
        margin: 20px 20px 20px 20px;
        width: 200px;
    }

    .btn-custom:hover {
        background-color: palegoldenrod;
        border-radius: 7px;
        color: black;
        font-weight: 500;
        border: 4px solid #423e1b;
        margin: 18px 18px 18px 18px;
    }

    .modal-dialog {
        width: 80vw !important;
    }

    .modal-body {
        max-height: 60vh;
        overflow-y: auto; 
        padding: 20px;
        font-family: Arial, sans-serif;
        line-height: 1.6; 
        color: #ddd; 
        background-color: #2b2b2a; 
    }

        .modal-body a {
            color: #f1c40f; 
            text-decoration: underline;
            font-weight: bold;
        }

        .modal-body a:hover {
            color: #ffdd57; 
            text-decoration: none;
        }

        .modal-body p {
            margin-bottom: 15px;
            text-align:left;
        }

        .modal-body::-webkit-scrollbar {
            width: 8px;
        }

        .modal-body::-webkit-scrollbar-thumb {
            background-color: #666;
            border-radius: 4px;
        }

        .modal-body::-webkit-scrollbar-track {
            background-color: #2b2b2a;
        }

    .modal .modal-footer {
        background-color: #2b2b2a; 
        border-top: 1px solid #423e1b; 
        color: #f1c40f;
        padding: 15px;
        text-align: center;
    }

        .modal .modal-footer .btn {
            background-color: darkgoldenrod;
            color: black;
            border: none;
        }

            .modal .modal-footer .btn:hover {
                background-color: palegoldenrod; 
                color: black;
            }


</style>

<PageTitle>PHINSCAL</PageTitle>
<Modal @ref="modal" class="modal-lg" IsServiceModal="true">
    <BodyTemplate>
        @if (current != null)
        {
            <div class="modal-body">
                @TermsAndConditionsHtml 
            </div>
        }
    </BodyTemplate>
</Modal>
<div class="header-title">
    <h1 class="title">PHINSCAL</h1>
</div>
<div class="container">
    <div class="fiorm-container">
        <div class="form_class">

            <div class="login">
                <h1 class="display-6 font-raleway">Prijava</h1>
                <EditForm Model="this" OnValidSubmit="LogIn" FormName="LoginForm">
                    <div>
                        <label for="name">Korisničko ime:</label>
                        <InputText id="username" class="form-control" @bind-Value="username" />
                    </div>
                    <div>
                        <label for="password" class="mt-2">Lozinka:</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="loginPassword" />
                    </div>
                    <div>
                        <button type="submit" class="btn btn-primary btn-custom">Prijava</button>
                    </div>
                </EditForm>
            </div>
            <div class="or_bor"></div>

            <div class="register">
                <h1 class="display-6 font-raleway">Registracija</h1>
                <EditForm Model="registrationModel" OnValidSubmit="Register" FormName="RegistrationForm">
                    <DataAnnotationsValidator />
                    <div>
                        <label for="name">Korisničko ime:</label>
                        <InputText id="name" class="form-control" @bind-Value="registrationModel.Username" />
                        <ValidationMessage For="() => registrationModel.Username" />
                    </div>
                    <div>
                        <label for="password" class="mt-2">Lozinka:</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="registrationModel.Password" />
                        <ValidationMessage For="() => registrationModel.Password" />
                    </div>
                    <div>
                        <label for="passwordConfirm" class="mt-2">Ponovite lozinku:</label>
                        <InputText id="passwordConfirm" type="password" class="form-control" @bind-Value="registrationModel.ConfirmPassword" />
                        <ValidationMessage For="() => registrationModel.ConfirmPassword" />
                    </div>
                    <div>
                        <label for="email">E-mail:</label>
                        <InputText id="email" type="email" class="form-control" @bind-Value="registrationModel.Email" />
                        <ValidationMessage For="() => registrationModel.Email" />
                    </div>
                    <div>
                        <label for="name">Ime:</label>
                        <InputText id="name" class="form-control" @bind-Value="registrationModel.Name" />
                        <ValidationMessage For="() => registrationModel.Name" />
                    </div>
                    <div>
                        <label for="lastname">Prezime:</label>
                        <InputText id="name" class="form-control" @bind-Value="registrationModel.LastName" />
                        <ValidationMessage For="() => registrationModel.LastName" />
                    </div>
                    <div>
                        <label for="lastname">Telefon:</label>
                        <InputText id="name" class="form-control" @bind-Value="registrationModel.PhoneNumber" />
                        <ValidationMessage For="() => registrationModel.PhoneNumber" />
                    </div>
                    <div>
                        <InputCheckbox @bind-Value="IsChecked" onclick="@IsValid" />
                        <label for="terms">
                            Prihvaćam <a href="#" @onclick="() => ShowModal(ModalType.Dark)"> uvjete korištenja</a></label>
                    </div>
                    <div>
                        <button type="submit" class="btn btn-primary btn-custom" disabled="@IsDisabled">Registracija</button>
                    </div>
                </EditForm>
            </div>
            

        @if (IsErrorMessageVisible)
        {
            <div class="mt-4">
                <p style="color:red">@ErrorMessage</p>
            </div>
        }
        </div>
    </div>
</div>


@code {
    [Inject] private NavigationManager NavManager { get; set; }
    [Inject] private ModalService ModalService { get; set; } = default!;
    [Inject] private LoggedInUserModel LoggedInUser { get; set; }
    [Inject] private UserService userService { get; set; }

    [SupplyParameterFromForm] private string username  { get; set; }
    [SupplyParameterFromForm] private string loginPassword { get; set; }

    [SupplyParameterFromForm] private RegistrationModel registrationModel { get; set; } = new();

    private Modal modal = default!;
    private ModalOptions current { get; set; }
    private bool IsErrorMessageVisible { get; set; }
    private string ErrorMessage { get; set; }
    private bool IsRegistered { get; set; } = true;
    private bool IsChecked { get; set; } = false;
    private bool IsDisabled { get; set; } = true;
    private MarkupString TermsAndConditionsHtml { get; set; }

    private void IsValid()
    {
        IsChecked = !IsChecked;
        IsDisabled = !IsDisabled;
    }

    private void ToggleRegistration()
    {
        IsRegistered = !IsRegistered;
        IsErrorMessageVisible = false;
    }

    private void LogIn()
    {
        try
        {
            var result = userService.Login(username, loginPassword);
            if (result != null)
            {
                LoggedInUser.Id = result.Id;
                LoggedInUser.User = result;
                NavManager.NavigateTo("/Info");
            }
            else
            {
                IsErrorMessageVisible = true;
                ErrorMessage = "Korisničko ime ili lozinka nisu točni.";
                username = "";
                loginPassword = "";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
            throw;
        }
    }

    private void Register()
    {
        try
        {
            IsErrorMessageVisible = false;
            ErrorMessage = "";

            var result = userService.GetUser(registrationModel.Email);
            if (result is not null)
            {
                IsErrorMessageVisible = true;
                ErrorMessage = "Email već postoji!";
                return;
            }

            var usernameValid = userService.IsUsernameValid(registrationModel.Username);
            if (!usernameValid)
            {
                IsErrorMessageVisible = true;
                ErrorMessage = "Korisničko ime je zauzeto!";
                return;
            }

            var user = new UserModel
                {
                    Username = registrationModel.Username,
                    Name = registrationModel.Name,
                    LastName = registrationModel.LastName,
                    Password = registrationModel.Password,
                    Email = registrationModel.Email,
                    PhoneNumber = registrationModel.PhoneNumber
                };

            userService.CreateUser(user);

            username = registrationModel.Username;
            loginPassword = registrationModel.Password;
            LogIn();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
            throw;
        }
    }

    private async Task ShowModal(ModalType modal)
    {
        var filePath = Path.Combine(WebHostEnvironment.WebRootPath, "TermsAndConditions.html");

        if (File.Exists(filePath))
        {
            var htmlContent = await File.ReadAllTextAsync(filePath);
            TermsAndConditionsHtml = new MarkupString(htmlContent); 
        }
        current = new ModalOptions
            {
                Title = "UVJETI KORIŠTENJA USLUGE PREMIUM FISKALNA BLAGAJNA",
                Message = "",
                Type = modal,
                FooterButtonText = "Zatvori",
                OnFooterButtonClick = EventCallback.Factory.Create(this, async () => await OnHideModalClick()),
                IsVerticallyCentered = true
                
            };
        await ModalService.ShowAsync(current);
    }

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }

    public class ModalOptions : ModalOption
    {
        public EventCallback OnFooterButtonClick { get; set; }
    }
}
